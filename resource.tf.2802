data "aws_ami" "ubuntu" {
  #executable_users = ["self"]
  most_recent      = true
  name_regex       = "^ubuntu"
  owners           = ["amazon"]

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}
#data "aws_ami" "amazon" {
#  #executable_users = ["self"]
#  most_recent      = true
#  name_regex       = "amazon"
#  owners           = ["amazon"]
#
#  #filter {
#  #  name   = "name"
#  #  values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
#  #}
#
#  filter {
#    name   = "root-device-type"
#    values = ["ebs"]
#  }
#
#  filter {
#    name   = "virtualization-type"
#    values = ["hvm"]
#  }
#}

#output "test" {
# value = data.aws_ami.amazon.image_id
#}
resource "aws_instance" "kamlesh-ubuntu" {
  #ami           = "ami-0e670eb768a5fc3d4"
  ami           = data.aws_ami.ubuntu.image_id
  instance_type = "t2.micro"
  key_name = "terraform_ec2_kamlesh_key"

  tags = {
    Name = "kamlesh-ubuntu"
  }
  vpc_security_group_ids = [aws_security_group.kamlesh-sg2.id]

  connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = "${file("/Users/kbm/Terraform/terraform_ec2_kamlesh_key")}"
      host        = "${self.public_dns}"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt install -y nginx",
      "sudo bash -c 'echo 'Hello World' > /var/www/html/index.html'",
    ]
  }
  provisioner "local-exec" {
    command = "echo ${self.private_ip} ${self.public_ip} >> buildinst_ips.txt"
  }
}


resource "null_resource" remotecopy {

  provisioner "file" {
    source      = "buildinst_ips.txt"
    destination = "/tmp/test.txt"
  }
  connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = "${file("/Users/kbm/Terraform/terraform_ec2_kamlesh_key")}"
      host        = aws_instance.kamlesh-ubuntu.public_ip
  }
}
#resource "aws_instance" "kamlesh-amazon" {
  #ami           = "ami-0e670eb768a5fc3d4"
#  ami           = data.aws_ami.amazon.image_id
#  instance_type = "t2.micro"
#  key_name = "terraform_ec2_kamlesh_key"

#  tags = {
#    Name = "kamlesh-amazon"
#  }
#  vpc_security_group_ids = [aws_security_group.kamlesh-sg1.id]
#}

resource "aws_key_pair" "terraform_kamlesh_ec2_key" {
        key_name = "terraform_ec2_kamlesh_key"
        public_key = "${file("terraform_ec2_kamlesh_key.pub")}"
}

#resource "aws_s3_bucket" "kamlesh-bucket" {
#  bucket = "kamlesh-test-bucket-01"
#
#  tags = {
#    Name        = "kamlesh-test-bucket-01"
#    Environment = "Dev"
#  }
#}

#data "aws_s3_bucket" "get" {
#  bucket  = "kamlesh-test-bucket-01"
#}

#output "bucketlist" {
# value = data.aws_s3_bucket.get.id
#}

#output "public_ip_of_kamlesh-ubuntu" {
#  value=aws_instance.kamlesh-ubuntu.public_ip
#}

#output "private_ip_of_kamlesh-ubuntu" {
#  value=aws_instance.kamlesh-ubuntu.private_ip
#}    

variable "aws" {
type = tuple([list(number), list(number)])
default = [[22,23], [80,88]]
}

variable "amazon" {
type = tuple([list(number), list(number)])
default = [[22,25], [80,84]]
}

#variable "arg" {
# type = list(string)
# default = [ "ubuntu", "amazon" ]
#}

#resource "aws_security_group" "kamlesh-sg" {
#for_each = toset(var.arg)
#name = "kamlesh-each.value"
#dynamic "ingress" {
#for_each = each.value
#content {
#from_port = ingress.value.0
#to_port = ingress.value.1
#protocol = "tcp"
#cidr_blocks = ["0.0.0.0/0"]
#}
#}
#}
resource "aws_security_group" "kamlesh-sg1" {
name = "kamlesh-sg1"
dynamic "ingress" {
for_each = var.aws
content {
from_port = ingress.value.0
to_port = ingress.value.1
protocol = "tcp"
cidr_blocks = ["0.0.0.0/0"]
}
}
egress{ 
from_port =0
to_port =0 
protocol ="-1"
cidr_blocks =["0.0.0.0/0"]
}
}

resource "aws_security_group" "kamlesh-sg2" {
name = "kamlesh-sg2"
dynamic "ingress" {
for_each = var.amazon
content {
from_port = ingress.value.0
to_port = ingress.value.1
protocol = "tcp"
cidr_blocks = ["0.0.0.0/0"]
}
}
egress{
from_port =0
to_port =0
protocol ="-1"
cidr_blocks =["0.0.0.0/0"]
}

}
